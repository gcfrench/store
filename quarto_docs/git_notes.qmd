---
title: "Git and GitHub notes"
author: "Graham French"
date-modified: "`r lubridate::today()`"
format: html
execute: 
  eval: false
knitr:
  opts_chunk:
    comment: "#>"
editor: visual
---

These notes were made whilst going through Jenny Bryan's [Happy Git and GitHub for the useR](https://happygitwithr.com/) instructions.

## Set up Git and GitHub

### [GitHub](https://happygitwithr.com/github-acct.html)

-   Register a [GitHub](https://github.com/) account.

-   Turn on two-factor authentication under: Settings - Account security.

### [Git](https://happygitwithr.com/install-git.html)

-   Install Git which can be done through [Git for Windows](https://gitforwindows.org).

-   Optionally install a Git client, for example [GitHub Desktop](https://desktop.github.com/), or other [recommended clients](https://happygitwithr.com/git-client.html).

-   In R Studio change terminal to open with Git Bash: Tools - Global Options - Terminal - New terminals open with - Git Bash.

Check Git installed on local machine

**Git commands**

```{bash}
where git
git --version
```

### [Set Git details](https://happygitwithr.com/hello-git.html)

**usethis::use_git_config** set Git user name and email

```{r}
usethis::use_git_config(user.name = "USERNAME", user.email = "EMAIL")
```

Check Git user name and email details

**Git commands**

```{bash}
git config --global --list
```

### [Connect RStudio to Git](https://happygitwithr.com/rstudio-see-git.html)

-   RStudio Tools - Global Options - Git/SVN - Git executable: set path, eg C:/Program Files/Git/bin/git.exe. Ensure **Enable version control interface for RStudio projects** is ticked.

-   Check for [common issues and solutions](https://happygitwithr.com/troubleshooting.html) in Jenny Bryan's instructions.

### [Cache credentials for HTTPS](https://happygitwithr.com/credential-caching.html)

**usethis::create_github_token** Get Personal access taken (PAT), storing token in a password management system

```{r}
usethis::create_github_token()
```

**gitcreds::gitcreds_set** Store credentials in Git credential store

```{r}
gitcreds::gitcreds_set()
```

## Clone own repositories

### [Clone own remote repository from GitHub](https://happygitwithr.com/new-github-first.html)

-   Create a repository under Repository.
-   GitHub: Code - Copy HTTPS URL to clipboard.

**usethis::create_from_github** Clones a remote repository from GitHub, creating a local project and Git repository.

```{r}
usethis::create_from_github(repo_spec = "HTTPS URL",
                            destdir = "DESTINATION DIRECTORY PATH",
                            fork = FALSE)
```

**Git commands**

```{bash}
git clone HTTPS URL
```

### [Clone own RStudio project to GitHub](https://happygitwithr.com/existing-github-last.html)

**usethis::use_git** Makes project a Git repository

```{r}
usethis::use_git()
```

**Git commands**

```{bash}
git init
```

-   Commit files to Git repository: RStudio Git - Tick staged box - Commit.
-   [Repeated amend commits to Git repository](https://happygitwithr.com/repeated-amend.html): RStudio - Tick staged box - Tick Amend previous commit - Commit

**Git commands**

Use Git command if [committing large number of files](https://stackoverflow.com/questions/43690977/commit-a-large-number-of-files-in-rstudio-using-git-panel) as RStudio GIT panel will freeze

```{bash}
git add -A
git commit -m "COMMIT MESSAGE"
```

```{bash}
git commit --amend --no-edit
```

**usethis::use_github** Create a new repository on GitHub

```{r}
usethis::use_github()
```

-   Pull files from GitHub repository: RStudio Git - Pull button.

-   Push committed files to GitHub: RStudio Git - Push button.

**Git commands**

```{bash}
git pull
git push
```

### [Work on a branch](https://happygitwithr.com/git-branches.html)

-   Create and switch to a new branch: RStudio Git - New Branch button

**Git commands**

```{bash}
git branch BRANCH_NAME
git checkout BRANCH_NAME
```

-   Switch and merge branch back into master.

**Git commands**

```{bash}
git checkout master
git merge BRANCH_NAME
```

-   Resolve merge conflicts, edit file either keeping contents of branch or master or modified version of both. Stage edited file and commit to master.

    ```         
    <<<<<<< branch contents =======
    ======= master contents >>>>>>>
    ```

**Git commands**

```{bash}
git status
git add EDITED_FILE_NAME
git commit -m "COMMIT MESSAGE"

-- If need to abort merge
git merge --abort
```

### [Revert back to previous state](https://happygitwithr.com/reset.html)

**Git commands**

-   check current status of repository

```{bash}
git status

```

-   changes saved but not committed RStudio Git - Diff - Discard All / Discard chunk

**Git commands**

```{bash}
git reset --hard HEAD
```

-   amend previous commit message

**Git commands**

```{bash}
git commit --amend -m "New commit message"
```

-   changes committed (revert to previous commit)

**Git commands**

```{bash}
-- revert to previous commit, saved and staged changes kept
git reset --soft HEAD^

-- revert to previous commut, saved changes kept but now unstaged
git reset HEAD^

-- revert to previous commit, saved and staged changes lost
git reset --hard HEAD^
```

**Git commands**

-   commit individual files to master path

```{bash}
git fetch
git checkout origin/master FILENAME
```

## Clone others repositories

### [Clone others remote repository from GitHub](https://happygitwithr.com/fork-and-clone.html)

In others remote repository on GitHub

-   GitHub: Fork - Copy others remote repository to your GitHub account.

In your repositories on GitHub

-   GitHub: Code - Copy forked repository in your GitHub account to HTTPS URL to clipboard.
-   RStudio: New Project - Version Control - Git - Repository URL - paste HTTPS URL

**Git commands**

```{bash}
git clone HTTPS URL
```

In others remote repository on GitHub (so that [able to pull changes from other remote repository](https://happygitwithr.com/upstream-changes.html))

-   GitHub: Copy others remote repository to HTTPS URL to clipboard.
-   RStudio: Add remote: RStudio Git - New Branch button - Add remote - Remote Name - Paste OTHERS REMOTE HTTPS URL.

**Git commands**

```{bash}
git remote add upstream OTHERS REMOTE HTTPS URL
```

**usethis::create_from_github** Clones and forks others remote repository from GitHub, creating a copy of the repository on your account in Github, a local project and a Git repository, and adds the others remote repository as an upstream remote repository to allow pulling file changes from this upstream remote.

```{r}
usethis::create_from_github(repo_spec = "HTTPS URL",
                            destdir = "DESTINATION DIRECTORY PATH", 
                            fork = TRUE)
```

-   Check current remotes contains both origin (forked copy of others repository in your github account) and upstream (copy of others repository) repositories.

**Git commands**

```{bash}
git remote -v
```

-   Pull changes from others remote repository into master branch, then optionally push to your forked copy (Push committed files to GitHub: RStudio Git - Push button).

**Git commands**

```{bash}
git pull upstream master --ff-only
git push
```

-   Create and switch to a new branch: RStudio Git - New Branch button. Make sure Synch branch with remote is ticked

**Git commands**

```{bash}
git branch BRANCH_NAME
git checkout BRANCH_NAME
```

-   Only work on this branch, committing and pushing changes to the forked repository in your GitHub account

-   GitHub: Compare and pull request button - Create pull request to [submit pull request](https://github.com/forwards/first-contributions) to others remote repository
